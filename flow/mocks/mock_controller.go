// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/larkox/mattermost-plugin-utils/flow (interfaces: FlowController)

// Package mock_flow is a generated GoMock package.
package mock_flow

import (
	gomock "github.com/golang/mock/gomock"
	flow "github.com/larkox/mattermost-plugin-utils/flow"
	reflect "reflect"
)

// MockFlowController is a mock of FlowController interface
type MockFlowController struct {
	ctrl     *gomock.Controller
	recorder *MockFlowControllerMockRecorder
}

// MockFlowControllerMockRecorder is the mock recorder for MockFlowController
type MockFlowControllerMockRecorder struct {
	mock *MockFlowController
}

// NewMockFlowController creates a new mock instance
func NewMockFlowController(ctrl *gomock.Controller) *MockFlowController {
	mock := &MockFlowController{ctrl: ctrl}
	mock.recorder = &MockFlowControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlowController) EXPECT() *MockFlowControllerMockRecorder {
	return m.recorder
}

// Cancel mocks base method
func (m *MockFlowController) Cancel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockFlowControllerMockRecorder) Cancel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockFlowController)(nil).Cancel), arg0)
}

// NextStep mocks base method
func (m *MockFlowController) NextStep(arg0 string, arg1 int, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextStep", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NextStep indicates an expected call of NextStep
func (mr *MockFlowControllerMockRecorder) NextStep(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextStep", reflect.TypeOf((*MockFlowController)(nil).NextStep), arg0, arg1, arg2)
}

// RegisterFlow mocks base method
func (m *MockFlowController) RegisterFlow(arg0 flow.Flow, arg1 flow.FlowStore) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterFlow", arg0, arg1)
}

// RegisterFlow indicates an expected call of RegisterFlow
func (mr *MockFlowControllerMockRecorder) RegisterFlow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFlow", reflect.TypeOf((*MockFlowController)(nil).RegisterFlow), arg0, arg1)
}

// Start mocks base method
func (m *MockFlowController) Start(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockFlowControllerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockFlowController)(nil).Start), arg0)
}
